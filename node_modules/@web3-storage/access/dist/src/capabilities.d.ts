export const storeAdd: Types.TheCapabilityParser<Types.CapabilityMatch<"store/add", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}>>;
export const storeRemove: Types.TheCapabilityParser<Types.CapabilityMatch<"store/remove", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}>>;
export const storeList: Types.TheCapabilityParser<Types.CapabilityMatch<"store/list", Types.URI<"did:">, {}>>;
export const store: Types.CapabilityParser<Types.CapabilityMatch<"store/add", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}> | Types.CapabilityMatch<"store/remove", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}> | Types.CapabilityMatch<"store/list", Types.URI<"did:">, {}>>;
export const identityValidate: Types.TheCapabilityParser<Types.CapabilityMatch<"identity/validate", Types.URI<"did:">, {
    as: Types.Decoder<unknown, `mailto:${string}`, Types.Failure>;
}>>;
export const identityRegister: Types.TheCapabilityParser<Types.CapabilityMatch<"identity/register", Types.URI<"mailto:">, {
    as: Types.Decoder<unknown, `did:${string}`, Types.Failure>;
}>>;
/**
 * `identity/identify` can be derived from any of the `store/*`
 * capability that has matichng `with`. This allows store service
 * to identify account based on any user request.
 */
export const identityIdentify: Types.TheCapabilityParser<Types.DerivedMatch<Types.ParsedCapability<"identity/identify", Types.URI<"did:">, Types.InferCaveats<{}>>, Types.CapabilityMatch<"store/add", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}> | Types.CapabilityMatch<"store/remove", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}> | Types.CapabilityMatch<"store/list", Types.URI<"did:">, {}>>>;
export const identity: Types.CapabilityParser<Types.CapabilityMatch<"identity/validate", Types.URI<"did:">, {
    as: Types.Decoder<unknown, `mailto:${string}`, Types.Failure>;
}> | Types.CapabilityMatch<"identity/register", Types.URI<"mailto:">, {
    as: Types.Decoder<unknown, `did:${string}`, Types.Failure>;
}> | Types.DerivedMatch<Types.ParsedCapability<"identity/identify", Types.URI<"did:">, Types.InferCaveats<{}>>, Types.CapabilityMatch<"store/add", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}> | Types.CapabilityMatch<"store/remove", Types.URI<"did:">, {
    link: Types.Decoder<unknown, Types.UCAN.Link<unknown, number, number, 0 | 1> | undefined, Types.Failure>;
}> | Types.CapabilityMatch<"store/list", Types.URI<"did:">, {}>>>;
import * as Types from "@ucanto/interface";
//# sourceMappingURL=capabilities.d.ts.map