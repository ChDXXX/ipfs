export * from "./ucan.js";
/** @type {UCAN.Version} */
export const VERSION: UCAN.Version;
export const name: "dag-ucan";
/** @type {typeof CBOR.code|typeof RAW.code} */
export const code: typeof CBOR.code | typeof RAW.code;
export function encode<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(ucan: UCAN.UCAN<C>): UCAN.ByteView<UCAN.UCAN<C>>;
export function decode<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(bytes: UCAN.ByteView<UCAN.UCAN<C>>): UCAN.View<C>;
export function link<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(ucan: UCAN.UCAN<C>, options?: {
    hasher?: UCAN.MultihashHasher<number> | undefined;
} | undefined): Promise<UCAN.Proof<C, number> & CID>;
export function write<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>, A extends number = number>(data: UCAN.UCAN<C>, { hasher }?: {
    hasher?: UCAN.MultihashHasher<A> | undefined;
} | undefined): Promise<{
    cid: UCAN.Proof<C, number> & CID;
    bytes: UCAN.ByteView<UCAN.UCAN<C>>;
    data: UCAN.UCAN<C>;
}>;
export function parse<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(jwt: UCAN.JWT<C>): UCAN.View<C>;
export function format<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(ucan: UCAN.UCAN<C>): UCAN.JWT<C>;
export function issue<A extends number, C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>({ issuer, audience, capabilities, lifetimeInSeconds, expiration, notBefore, facts, proofs, nonce, }: UCAN.UCANOptions<C, A>): Promise<UCAN.View<C>>;
export function verifySignature<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(ucan: UCAN.Model<C>, authority: UCAN.Authority): UCAN.Await<boolean>;
export function isExpired(ucan: UCAN.Model): boolean;
export function isTooEarly(ucan: UCAN.Model): boolean;
export function now(): number;
import * as UCAN from "./ucan.js";
import * as CBOR from "./codec/cbor.js";
import * as RAW from "./codec/raw.js";
import * as View from "./view.js";
import { CID } from "multiformats/cid";
//# sourceMappingURL=lib.d.ts.map