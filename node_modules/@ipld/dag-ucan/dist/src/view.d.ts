export function cbor<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(data: UCAN.Model<C>): UCAN.View<C>;
export function jwt<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(model: UCAN.Model<C>, bytes: UCAN.RAW<C>): UCAN.JWTView<C>;
import * as UCAN from "./ucan.js";
/**
 * @template {UCAN.Capability} C
 * @implements {UCAN.View<C>}
 */
declare class View<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>> implements UCAN.View<C> {
    /**
     * @param {UCAN.Model<C>} model
     */
    constructor(model: UCAN.Model<C>);
    /** @readonly */
    readonly model: UCAN.Model<C>;
    get version(): `${number}.${number}.${number}`;
    get issuer(): UCAN.DIDView;
    get audience(): UCAN.DIDView;
    /**
     * @returns {C[]}
     */
    get capabilities(): C[];
    /**
     * @returns {number}
     */
    get expiration(): number;
    /**
     * @returns {undefined|number}
     */
    get notBefore(): number | undefined;
    /**
     * @returns {undefined|string}
     */
    get nonce(): string | undefined;
    /**
     * @returns {UCAN.Fact[]}
     */
    get facts(): UCAN.Fact[];
    /**
     * @returns {UCAN.Proof[]}
     */
    get proofs(): UCAN.Proof<UCAN.Capability<UCAN.Ability, `${string}:${string}`>, number>[];
    get signature(): UCAN.Signature<UCAN.SignPayload<C>, number>;
}
import * as RAW from "multiformats/codecs/raw";
/**
 * @template {UCAN.Capability} C
 * @implements {UCAN.JWTView<C>}
 */
declare class JWTView<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>> extends Uint8Array implements UCAN.JWTView<C> {
    /**
     * @param {UCAN.Model<C>} model
     * @param {object} bytes
     * @param {ArrayBuffer} bytes.buffer
     * @param {number} [bytes.byteOffset]
     * @param {number} [bytes.byteLength]
     */
    constructor(model: UCAN.Model<C>, { buffer, byteOffset, byteLength }: {
        buffer: ArrayBuffer;
        byteOffset?: number | undefined;
        byteLength?: number | undefined;
    });
    model: UCAN.Model<C>;
    get version(): `${number}.${number}.${number}`;
    get issuer(): UCAN.DIDView;
    get audience(): UCAN.DIDView;
    /**
     * @returns {C[]}
     */
    get capabilities(): C[];
    /**
     * @returns {number}
     */
    get expiration(): number;
    /**
     * @returns {undefined|number}
     */
    get notBefore(): number | undefined;
    /**
     * @returns {undefined|string}
     */
    get nonce(): string | undefined;
    /**
     * @returns {UCAN.Fact[]}
     */
    get facts(): UCAN.Fact[];
    /**
     * @returns {UCAN.Proof[]}
     */
    get proofs(): UCAN.Proof<UCAN.Capability<UCAN.Ability, `${string}:${string}`>, number>[];
    get signature(): UCAN.Signature<UCAN.SignPayload<C>, number>;
}
export {};
//# sourceMappingURL=view.d.ts.map