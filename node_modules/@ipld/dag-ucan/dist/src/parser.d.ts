export function parse<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(input: UCAN.JWT<C>): UCAN.Model<C>;
export function parseHeader(header: string): {
    version: `${number}.${number}.${number}`;
};
export function parsePayload<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(input: string): {
    issuer: UCAN.DIDView;
    audience: UCAN.DIDView;
    expiration: number;
    nonce: string | undefined;
    notBefore: number | undefined;
    facts: UCAN.Fact[];
    proofs: UCAN.Proof<UCAN.Capability<UCAN.Ability, `${string}:${string}`>, number>[];
    capabilities: C[];
};
export function parseInt(input: unknown, name: string): number;
export function parseCapability(input: unknown, context: string): UCAN.Capability<UCAN.Ability, `${string}:${string}`>;
export function parseCapabilities(input: unknown, context: string): UCAN.Capability<UCAN.Ability, `${string}:${string}`>[];
export function asCapability<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`>>(input: C | (object & {
    can?: unknown;
    with?: unknown;
})): C;
export function parseArray<T>(input: unknown, parser: (input: unknown, context: string) => T, context: string): T[];
export function parseOptionalArray<T>(input: unknown, parser: (input: unknown, context: string) => T, context: string): T[] | undefined;
export function parseStruct<T>(input: unknown, parser: (input: object) => T, context: string): T;
export function parseFact(input: unknown, context: string): UCAN.Fact;
export function parseDID(input: unknown, context: string): UCAN.DIDView;
export function parseOptionalString(input: unknown, context?: string | undefined): string | undefined;
export function parseOptionalInt(input: unknown, context: string): number | undefined;
export function parseVersion(input: unknown, context: string): UCAN.Version;
export function parseBytes(input: unknown, context: string): Uint8Array;
export class ParseError extends TypeError {
    /**
     * @param {string} message
     * @returns {never}
     */
    static throw(message: string): never;
    get name(): string;
}
import * as UCAN from "./ucan.js";
//# sourceMappingURL=parser.d.ts.map