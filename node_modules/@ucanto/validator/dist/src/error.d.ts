/**
 * @implements {API.Failure}
 */
export class Failure extends Error implements API.Failure {
    /** @type {true} */
    get error(): true;
    describe(): string;
    get message(): string;
    toJSON(): {
        error: true;
        name: string;
        message: string;
    };
}
export class EscalatedCapability extends Failure {
    /**
     * @param {API.ParsedCapability} claimed
     * @param {object} delegated
     * @param {API.Failure} cause
     */
    constructor(claimed: API.ParsedCapability, delegated: object, cause: API.Failure);
    claimed: API.ParsedCapability<API.UCAN.Ability, API.URI<`${string}:`>, any>;
    delegated: object;
    cause: API.Failure;
    name: "EscalatedCapability";
}
/**
 * @implements {API.DelegationError}
 */
export class DelegationError extends Failure implements API.DelegationError {
    /**
     * @param {(API.InvalidCapability | API.EscalatedDelegation | API.DelegationError)[]} causes
     * @param {object} context
     */
    constructor(causes: (API.InvalidCapability | API.EscalatedDelegation | API.DelegationError)[], context: object);
    name: "InvalidClaim";
    causes: (API.InvalidCapability | API.EscalatedDelegation | API.DelegationError)[];
    context: object;
    /**
     * @type {API.InvalidCapability | API.EscalatedDelegation | API.DelegationError}
     */
    get cause(): API.InvalidCapability | API.EscalatedDelegation | API.DelegationError;
}
/**
 * @implements {API.InvalidSignature}
 */
export class InvalidSignature extends Failure implements API.InvalidSignature {
    /**
     * @param {API.Delegation} delegation
     */
    constructor(delegation: API.Delegation);
    name: "InvalidSignature";
    delegation: API.Delegation<[API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>, ...API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>[]]>;
    get issuer(): API.UCAN.Identity;
    get audience(): API.UCAN.Identity;
}
/**
 * @implements {API.UnavailableProof}
 */
export class UnavailableProof extends Failure implements API.UnavailableProof {
    /**
     * @param {API.UCAN.Proof} link
     * @param {Error} [cause]
     */
    constructor(link: API.UCAN.Proof, cause?: Error | undefined);
    name: "UnavailableProof";
    link: API.UCAN.Proof<API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>, number>;
    cause: Error | undefined;
}
/**
 * @implements {API.InvalidAudience}
 */
export class InvalidAudience extends Failure implements API.InvalidAudience {
    /**
     * @param {API.UCAN.Identity} audience
     * @param {API.Delegation} delegation
     */
    constructor(audience: API.UCAN.Identity, delegation: API.Delegation);
    name: "InvalidAudience";
    audience: API.UCAN.Identity;
    delegation: API.Delegation<[API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>, ...API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>[]]>;
    toJSON(): {
        error: true;
        name: "InvalidAudience";
        audience: API.UCAN.DID<unknown>;
        delegation: {
            audience: API.UCAN.DID<unknown>;
        };
        message: string;
    };
}
/**
 * @implements {API.MalformedCapability}
 */
export class MalformedCapability extends Failure implements API.MalformedCapability {
    /**
     * @param {API.Capability} capability
     * @param {API.Failure} cause
     */
    constructor(capability: API.Capability, cause: API.Failure);
    name: "MalformedCapability";
    capability: API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>;
    cause: API.Failure;
}
export class UnknownCapability extends Failure {
    /**
     * @param {API.Capability} capability
     */
    constructor(capability: API.Capability);
    name: "UnknownCapability";
    capability: API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>;
}
export class Expired extends Failure {
    /**
     * @param {API.Delegation & { expiration: number }} delegation
     */
    constructor(delegation: API.Delegation & {
        expiration: number;
    });
    name: "Expired";
    delegation: API.Delegation<[API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>, ...API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>[]]> & {
        expiration: number;
    };
    get expiredAt(): number;
    toJSON(): {
        error: true;
        name: "Expired";
        message: string;
        expiredAt: number;
    };
}
export class NotValidBefore extends Failure {
    /**
     * @param {API.Delegation & { notBefore: number }} delegation
     */
    constructor(delegation: API.Delegation & {
        notBefore: number;
    });
    name: "NotValidBefore";
    delegation: API.Delegation<[API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>, ...API.UCAN.Capability<API.UCAN.Ability, `${string}:${string}`>[]]> & {
        notBefore: number;
    };
    get validAt(): number;
}
export function indent(message: string, indent?: string): string;
export function li(message: string): string;
import * as API from "@ucanto/interface";
//# sourceMappingURL=error.d.ts.map