export const code: 237;
export const name: "Ed25519";
export function parse(did: API.DID): API.Authority<typeof code>;
export function decode(bytes: Uint8Array): API.Authority<typeof code>;
export function format(authority: API.Authority<typeof code>): API.UCAN.DID<unknown>;
export function encode(authority: API.Authority<typeof code>): Uint8Array;
import * as API from "@ucanto/interface";
import * as DID from "@ipld/dag-ucan/src/did";
/**
 * @implements {API.Authority<typeof code>}
 */
declare class Authority implements API.Authority<typeof code> {
    /**
     * @param {ArrayBuffer} buffer
     * @param {number} [byteOffset]
     */
    constructor(buffer: ArrayBuffer, byteOffset?: number | undefined);
    /** @readonly */
    readonly buffer: ArrayBuffer;
    /** @readonly */
    readonly byteOffset: number;
    /** @readonly */
    readonly byteLength: number;
    get bytes(): Uint8Array;
    /**
     * Raw public key without a multiformat code.
     *
     * @readonly
     */
    readonly get publicKey(): Uint8Array;
    /**
     * DID of the authority in `did:key` format.
     * @returns {API.DID}
     */
    did(): API.DID;
    /**
     * @template T
     * @param {API.ByteView<T>} payload
     * @param {API.Signature<T, typeof code>} signature
     * @returns {Promise<boolean>}
     */
    verify<T>(payload: API.UCAN.ByteView<T>, signature: API.UCAN.Signature<T, 237>): Promise<boolean>;
}
export {};
//# sourceMappingURL=authority.d.ts.map