export function create<Code extends number, Alg extends number>(code: Code, digest: API.UCAN.MultihashDigest<Alg>): API.UCAN.Link<unknown, Code, Alg, 1> & CID;
export function createV0<Alg extends number>(digest: API.UCAN.MultihashDigest<Alg>): API.UCAN.Link<unknown, 112, Alg, 0> & CID;
export function isLink<L extends API.UCAN.Link<unknown, number, number, 0 | 1>>(value: unknown): value is L & CID;
export function asLink<L extends API.UCAN.Link<unknown, number, number, 0 | 1>>(value: unknown): (L & CID) | null;
export function parse<P extends string>(source: string, base?: API.MultibaseDecoder<P> | undefined): API.Link<unknown, number, number, 0 | 1> & CID;
export const decode: typeof CID.decode;
import * as API from "@ucanto/interface";
import { CID } from "multiformats";
//# sourceMappingURL=link.d.ts.map